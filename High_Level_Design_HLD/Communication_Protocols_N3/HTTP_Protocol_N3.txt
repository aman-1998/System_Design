Web-Browser provides the functionality of Application Layer, Presentation Layer
and Session Layer.

There are two types of protocol at Application layer:
1. Client-Server protocol
2. Peer to Peer protocol

Client-Server protocol : HTTP, FTP, SMTP, Websockets
Peer to peer protocol: WebRTC


# HTTP (Hyper Text Transfer Protocol):
---------------------------------------
HTTP stands for HyperText Transfer Protocol. It is the foundation of data 
communication on the World Wide Web (WWW). It uses TCP as transport layer protocol.

In simple terms:
----------------
HTTP is a protocol that defines how messages are formatted and transmitted, and 
what actions web servers and browsers should take in response to various commands.

Key Concepts:
--------------
Client-Server Model:
---------------------
The client (e.g., your browser) sends an HTTP request.
The server (e.g., a website) responds with an HTTP response.


Stateless Protocol:
---------------------
HTTP doesn’t retain information between requests. Every request is independent.


HTTP Methods:
--------------------------
GET: Retrieve data
POST: Send data
PUT: Update data
DELETE: Remove data
PATCH: Partially update data

HTTP Status Codes (in the response):
--------------------------------------
200 OK: Success
404 Not Found: Resource not found
500 Internal Server Error: Server encountered an error


Example of an HTTP Request:
----------------------------
GET /index.html HTTP/1.1
Host: www.example.com

Example of an HTTP Response:
-----------------------------
HTTP/1.1 200 OK
Content-Type: text/html

<html>
  <body>Hello, World!</body>
</html>


Versions:
----------
HTTP/1.0 : Connection is closed after response is received.
HTTP/1.1 : Connection is persisted after response is received.
HTTP/2 : Faster, supports multiplexing (multiple requests in one connection).
HTTP/3 : Uses QUIC instead of TCP for even better performance.


# HTTP/1.0 Protocol:
---------------------
In HTTP/1.0, each request/response pair required a new TCP connection unless 
explicitly stated (Connection: keep-alive).

# HTTP/1.1 Protocol:
---------------------
In HTTP/1.1, connections are persistent by default unless the client or server 
says otherwise using:
Connection: close

Why should we keep the connection open ?
-----------------------------------------
Reduces overhead of opening and closing TCP connections repeatedly.
Allows multiple requests/responses to be handled in sequence without re-establishing the connection.

How the connection is closed ?
--------------------------------
The connection remains open until:
-> Either the client or server sends Connection: close
-> Or there is a timeout
-> Or the maximum number of requests allowed on a connection is reached 
   (some servers set limits)

Example:
--------
Request 1 (Client → Server)
---------------------------
GET /page1.html HTTP/1.1
Host: example.com

Response 1 (Server → Client)
----------------------------
HTTP/1.1 200 OK
Content-Type: text/html
Connection: keep-alive

Now, the same TCP connection is reused for the next request.

If it was Connection: close:
-----------------------------
Then the server would close the TCP connection immediately after sending the response.


# HTTP/2 prorocol :
--------------------
It is an advanced version of HTTP/1.1 protocol. If client and server both supports 
HTTP/2 then instead of HTTP/1.1, HTTP/2 is used as communication protocol.

In a SpringBoot application, we can can configure Tomcat to support HTTP2 protocol.
But if client doesn’t support HTTP/2 protocol it falls back to HTTP/1.1

HTTP/1.1 vs HTTP/2 — Key Differences
-------------------------------------------------------------------------------------------------------------------------------------
| Feature                    | **HTTP/1.1**                                   | **HTTP/2**                                           |
|----------------------------|------------------------------------------------|------------------------------------------------------|
| **Multiplexing**           |  No — One request per connection at a time     |  Yes — Multiple requests on a single connection      |
| **Header Compression**     |  No — Headers are sent as plain text           |  Yes — Uses HPACK to compress headers                |
| **Binary Protocol**        |  No — Text-based protocol                      |  Yes — Fully binary, faster to parse                 |
| **Server Push**            |  No                                            |  Yes — Server can push resources before client asks  |
| **Connection Reuse**       |  Yes — Persistent connections supported        |  Yes — Even more efficient with multiplexing         |
| **Request Prioritization** |  No                                            |  Yes — Allows client to prioritize responses         |
| **Latency & Speed**        |  Higher latency due to head-of-line blocking   |  Lower latency and faster page loads                 |
| **Backward Compatibility** |  Widely supported by old clients/servers       |  Not supported by all legacy systems                 |
-------------------------------------------------------------------------------------------------------------------------------------


Key Concepts Explained:
------------------------
1. Multiplexing
----------------
HTTP/1.1: Only one request per TCP connection. Parallel requests need multiple 
connections, causing overhead.
HTTP/2: Multiple requests/responses can be interleaved over a single connection, improving efficiency.

2. Head-of-Line Blocking
-------------------------
In HTTP/1.1, if one request gets delayed, others wait too.
HTTP/2 solves this with stream-based multiplexing, so each request is independent.

3. Header Compression
----------------------
HTTP/1.1: Sends full headers every time — inefficient.
HTTP/2: Compresses headers using HPACK, reducing size and improving speed.

4. Server Push
---------------
HTTP/2 allows the server to push resources (like CSS, JS files) before the 
client asks — reducing load time.


HTTP/3 we will see later.


What is TLS ?
--------------
TLS is a security protocol that provides encryption, authentication, and data 
integrity for data sent over a network — especially over the internet.

It's the modern, more secure replacement for SSL (Secure Sockets Layer).

What does TLS do ?
-------------------
TLS ensures:
Encryption – Keeps your data private while it's being sent.
Authentication – Confirms the server (and sometimes the client) is who it claims to be.
Integrity – Makes sure the data hasn’t been tampered with during transfer.

Where is TLS used ?
--------------------
-> HTTPS (Secure websites): When you visit a website like https://google.com, TLS is what makes the connection secure.
-> Email (SMTP, IMAP, POP3 over TLS)
-> VPNs, VoIP, messaging apps, FTP over TLS, etc.


TLS Versions
--------------
TLS 1.0 and 1.1 → Outdated, insecure
TLS 1.2 → Still widely used
TLS 1.3 → Latest version, faster and more secure

 -------------------------------------------------------------------------------------
| Term    | Meaning                                                                   |
|---------|---------------------------------------------------------------------------|
| SSL     | Secure Sockets Layer — the original encryption protocol for HTTPS         |
| TLS     | Transport Layer Security — the modern, secure version that replaced SSL   |
 -------------------------------------------------------------------------------------


# What is HTTPS :
------------------
HTTPS = HTTP(any version) + SSL/TLS Encryption

When you (client i.e., browser like chrome) sends a request, before that a TCP
handshake takes place (3-way : SYN, SYN-ACK, ACK) and then TLS/SSL handshake takes place.

In HTTPS : TCP handshake + TLS/SSL handshake
In HTTP : TCP handshake


***TLS/SSL Handshake:
----------------------

Analogy to Help You:
--------------------
Think of this as sending a secret message in a box with a lock:
The server has a special lock and key (public + private key).
The lock (public key) is shared with everyone.
The key (private key) is kept secret by the server.

>>Step 1: Client: "Hello!"
-------------------------
Client sends a request to the server (e.g., when you open a website).
Says: "Hi! I want to talk securely. I support these encryption methods."
This is called the Client Hello.

>>Step 2: Server: "Hello + Here’s My ID"
---------------------------------------
Server responds with:
"Hi! I also support encryption method X."
"Here's my SSL/TLS certificate with my public key."
(Think of this certificate as a digital ID card verified by a 
Certificate Authority like GoDaddy, DigiCert, etc)

>>Step 3: Client Checks Certificate
----------------------------------
The client (e.g., your browser) now does two things:
-> Verifies the certificate (to make sure it's from a trusted authority and not expired).
-> Extracts the public key from the certificate.

>>Step 4: Client Creates Secret Key
----------------------------------
The client generates a secret session key (called a symmetric key).
This key will be used for actual data encryption (faster than public/private key encryption).

>>Step 5: Client Locks the Key
-----------------------------
Now, the client encrypts the session key using the server’s public key (from the certificate).
(This is like putting the key in a box and locking it with the server's public lock.)

>>Step 6: Sends Encrypted Key to Server
---------------------------------------
The client sends this encrypted session key to the server.

>>Step 7: Server Unlocks the Box
--------------------------------
The server uses its private key to decrypt the box and retrieve the session key.
(Only the server can do this because only it has the private key.)

>>Step 8: Now Secure Communication Begins
----------------------------------------
Both the client and server now share the same symmetric key (Session key).
All communication is now encrypted using this key. It’s fast and secure.


Conclusion: So, this extra handshake in HTTPS makes communication secure.
So, HTTPS stands for Hyper Text Transfer Protocol Secure


# HTTP/3 Protocol :
--------------------
It is the most advanced version of HTTP protocol.
HTTP/3 always uses encryption (TLS) — it's mandatory.
Unlike HTTP/1.1 and HTTP/2, which can technically work with or without TLS.
 ----------------------------------------------------------------------------------
| Protocol     | Encryption Required?                       | Transport Layer      |
| -------------|--------------------------------------------|----------------------|
| HTTP/1.1     | Optional (can be HTTP or HTTPS)            | TCP                  |
| HTTP/2       | Optional (but most browsers require TLS)   | TCP                  |
| HTTP/3       | Always encrypted (HTTPS only)              | QUIC (UDP-based)     |
 ----------------------------------------------------------------------------------
 
HTTP/3 uses QUIC instead of TCP
QUIC (Quick UDP Internet Connections) is a new transport protocol by Google.

It combines features of:
1. TCP (reliability, packet ordering)
2. TLS (encryption)
3. Multiplexed streams (like HTTP/2)

TLS is built into QUIC:
-> Specifically uses TLS 1.3
-> No separate "TLS handshake" layer — it’s integrated

QUIC handles connection establishment + encryption in a single handshake, 
making it faster than traditional TCP + TLS.



